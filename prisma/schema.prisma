generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid()) @db.VarChar
  email         String?    @unique(map: "ix_Users_email") @db.VarChar
  name          String?    @db.VarChar
  image         String?    @db.VarChar
  password      String?    @db.VarChar
  emailVerified DateTime?  @map("email_verified")
  apiKey        String?    @unique @map("api_key")
  accounts      Account[]
  sessions      Session[]
  bots          Bot[]
  documents     Document[]
  activities    Activity[]

  invitesSent     InviteTeam[] @relation("AdminInvites")
  invitesReceived InviteTeam[] @relation("MemberInvites")

  @@index([id], map: "ix_Users_id")
  @@map("Users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Bot {
  id          String   @id @default(uuid())
  name        String
  description String
  avatarUrl   String?  @map("avatar_url")
  isActive    Boolean  @default(true) @map("is_active")
  settings    Json     @default("{\"model\": \"gpt-3.5-turbo\", \"temperature\": 0.7, \"maxTokens\": 1024}")
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  dataSetId   String   @map("data_set_id")
  chatId      String   @map("chat_id")
  sessionId   String?  @map("session_id")

  documents    Document[]
  sessionChats SessionChat[]
}

model Document {
  id        String   @id @default(uuid())
  name      String
  type      String
  size      Int
  status    String   @default("processing")
  url       String
  botId     String   @map("bot_id")
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
}

model SessionChat {
  id        String   @id @default(uuid())
  name      String
  botId     String   @map("bot_id")
  bot       Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  messages Message[]
}

model Message {
  id            String      @id @default(uuid())
  role          String
  content       String
  sessionChatId String      @map("session_chat_id")
  sessionChat   SessionChat @relation(fields: [sessionChatId], references: [id], onDelete: Cascade)
  reference     Json?       @default("{}")
  createdAt     DateTime    @default(now()) @map("created_at")
}

model File {
  id        String   @id @default(uuid())
  datasetId String?
  type      String?
  createdAt DateTime @default(now()) @map("created_at")
}

enum ActivityType {
  CREATED
  UPDATED
  DELETED
  EDITED
  SHARED
  UPLOADED
}

model Activity {
  id         String       @id @default(uuid())
  userId     String       @map("user_id")
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  action     ActivityType
  targetType String       @map("target_type")
  targetName String       @map("target_name")
  createdAt  DateTime     @default(now()) @map("created_at")
}

enum InviteTeamStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model InviteTeam {
  id        String           @id @default(uuid())
  adminId   String
  memberId  String
  status    InviteTeamStatus
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt

  admin  User @relation("AdminInvites", fields: [adminId], references: [id])
  member User @relation("MemberInvites", fields: [memberId], references: [id])

  @@unique([adminId, memberId])
}
